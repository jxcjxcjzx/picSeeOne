正则表达式引擎实现原理－图方式实现 (2008-10-26 15:48:58)转载▼
标签： 编译原理 正则表达式引擎 图 实现原理 杂谈	分类： 技术相关
正则表达式引擎实现：有DFA与NFA实现两种方式。我在这里简单说明下构成DFA与NFA的方式
 
实现原理: 下面简述之, 以(a|b)*abb为例: 方案1: NFA识别: 根据Thompson构造NFA, 程序如下:
  
T := ε-closure({s0}); // ε-closure 为关系闭包, {s0}表示以起始状态S0构成的集合
a := nextchar;
while a <> '' do // 输入串不为空
begin
        T := ε-closure(MoveTo(T, a)); // 由状态T(集合)在输入a后到达的状态的集合
        a := nextchar;
    end;
    if T 交 F <> 空 then // 集合T与F的交集不为空, F为接受状态集合
        Result := True
    else
      Result := False;
方案2: 由NFA 生成DFA 
  初始时, ε-closure({S0})为Dstate(DFA状态转换表)中的一个未标记项
      while Dstate存在一个未标记项T do begin
        标记 T;
    for 对于每一个输入符号a do 
        begin
          U := ε-closure(MoveTo(T, a));
          if U不在Dstate表中 then
             将U做为一个未标记项放入DState中;
          Dstate[T, a] := U;
       end;       
     end;
关于ε-closure的函数实现：
 
  将T中所有的状态压入栈stack中;
      将ε-closure(T)初始化为T;
      while stack 不空 do
      begin
        将栈顶元素t弹出来;
        for 对于任意存在状态u, 使得有从t->u有一条标记为ε的边 then
          if u 不在ε-closure(T)中 then
          begin
            将u添加到ε-closure(T)中;
            将u压入栈stack中;
         end;
     end;
 
 
下面附上正则表达式的符号意思：
正则表达式符号说明（注意，不同版本的正则表达式引擎对格式串的解析是不一样的，在使用时，最好先摸下自己用的正则表达式引擎的格式）
\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，'n' 匹配字符 "n"。'\n' 匹配一个换行符。序列 '\\' 匹配 "\" 而 "\(" 则匹配 "("。
匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性， 也匹配 '\n' 或 '\r' 之后的位置。
$ 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置。
* 匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
+ 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
? 匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 {0,1}。
{n} n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
{n,} n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。
{n,m} m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。
? 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。
. 匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。
(pattern) 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 '\(' 或 '\)'。
(?:pattern) 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 "或" 字符 (|) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。
(?=pattern) 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，'Windows (?=95|98|NT|2000)' 能匹配 "Windows 2000" 中的 "Windows" ，但不能匹配 "Windows 3.1" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
(?!pattern) 负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95|98|NT|2000)' 能匹配 "Windows 3.1" 中的 "Windows"，但不能匹配 "Windows 2000" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始
x|y 匹配 x 或 y。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。
[xyz] 字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。
[xyz] 负值字符集合。匹配未包含的任意字符。例如， '[abc]' 可以匹配 "plain" 中的'p'。
[a-z] 字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。
[a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。
\b 匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。
\B 匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。
\cx 匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
\d 匹配一个数字字符。等价于 [0-9]。
\D 匹配一个非数字字符。等价于 [^0-9]。
\f 匹配一个换页符。等价于 \x0c 和 \cL。
\n 匹配一个换行符。等价于 \x0a 和 \cJ。
\r 匹配一个回车符。等价于 \x0d 和 \cM。
\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。
\S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
\t 匹配一个制表符。等价于 \x09 和 \cI。
\v 匹配一个垂直制表符。等价于 \x0b 和 \cK。
\w 匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。
\W 匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。
下面举几个例子来说明正则表达式的用法
识别以字母a或b组成的字符串, 且此字符串最后是以abb结尾: (a|b)*abb
识别一个字符串为Windows的文件路径(如: c:\temp\a.txt): ^[a..zA..Z]\:\\(\w{1,255}\\)*\w(1,255)\.\w{3}$
 
